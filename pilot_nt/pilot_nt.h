#pragma once

#include "paramsln.h"
#include <windows.h>

#ifdef PILOT_NT_EXPORTS
#define PILOT_NT_API __declspec(dllexport)
#else
#define PILOT_NT_API __declspec(dllimport)
#endif

/**
 * Основные параметры операции.
 * Структура, используемая для описания операции и получения результатов выполнения операции.
 */
 /** @struct auth_answer
  *  @brief Основные параметры операции.
  */
typedef struct 
{
    int TType;             /**< [in] тип операции. см ::OpetationTypes */
    unsigned long Amount;  /**< [in] сумма в копейках                    */
    char RCode[3];         /**< [out] двузначный код результата авторизации. Значение 00 означает успех операции, 01-98 - полученные от хоста ошибки авторизации, 99 - все остальные ошибки, в том числе возникшие локально и не свзанные с ответами хоста.*/
    char AMessage[16];     /**< [out] текст результата авторизации       */
    int  CType;            /**< [in,out] тип карты                       */
    char* Check;           /**< [out] образ чека, должен освобождаться GlobalFree в вызывающей программе */
} auth_answer;

/** @struct auth_answer14
 *  @brief Расширение card_authorize13 возможностью указать информацию о товаре.
 */
typedef struct 
{
    auth_answer   ans;               /**< [in, out]  Основные параметры операции. См. ::auth_answer */
    char   AuthCode[MAX_AUTHCODE];  /**< [out] Код авторизации. 7 байт.              */
    char   CardID[CARD_ID_LEN];      /**< [out] Идентификатор карты. 25 байт. Для международных карт все символы, кроме первых 6 и последних 4, будут заменены символами ‘*’.*/
    int    ErrorCode;                /**< [out] Код ошибки.                                         */
    char   TransDate[TRANSDATE_LEN]; /**< [out] Дата и время операции                               */
    int    TransNumber;              /**< [out] Номер операции за опер. день, см. номер на чеке     */
    int    SberOwnCard;              /**< [out] Флаг принадлежности карты Сбербанку                 */
    char   Hash[CARD_HASH_LEN];      /**< [in, out] хеш SHA1 от номера карты, в формате ASCII с нулевым байтом в конце. 40 байт.*/
    char   Track3[CARD_TRACK3_LEN];  /**< [out] третья дорожка карты. В PCI DSS решениях содержит данные с карты лояльности*/
    DWORD  RequestID;                /**< [in,out] Уникальный номер операции. Только PCI DSS решения.*/
    DWORD  Department;              /**< [in] Порядковый номер отдела от 0 до 14-ти, включительно.
                                              При установке номера отдела в 0xFFFFFFFF, номер отдела
                                              будет запрошен через интерфейс терминала после вставки карты.
                                              Если номер отдела будет указан вне настроенного диапазона,
                                              то терминал вернет код ошибки 4191. */
    char   RRN[MAX_REFNUM];          /**< [in,out] Номер ссылки операции, присвоенный хостом. Используется
                                                  для операций возврат, множественной авторизации и завершения расчета.
                                                  Содержит уникальный 12-значный ссылочный номер.
                                                  При предавторизации это поле является выходным
                                                  (его заполняет библиотека pilot_nt.dll), а при
                                                  завершении расчета – входным (значение должно
                                                  быть заполнено вызывающей программой; оно должно
                                                  совпадать со значением, возвращенным при предавторизации).*/
    DWORD  CurrencyCode;             /**< [in] Международный код валюты (810, 643, 840, 978 и т.д.) */
    char   CardEntryMode;            /**< [out] Способ чтения карты ('D'-магн.полоса, 'M'-ручной ввод, 'C'-чип, 'E'-бесконтакт EMV, 'R'-бесконтакт magstripe, 'F'-fallback, 'Q'-QR код, 'P'- Bio)*/
    char   CardName[MAX_CARD_NAME_LEN]; /**< [out] Название типа карты */
    char   AID[MAX_AID_ASCII_LEN];   /**< [out] Application ID чиповой карты (в виде ASCIIZ-строки). Не используется для PCI-DSS решений*/
    char   FullErrorText[MAX_FULL_ERROR_TEXT]; /**< [out] Полный текст сообщения об ошибке*/
    DWORD  GoodsPrice;                /**< [in] Цена за единицу товара, коп (34.99->3499)*/
    DWORD  GoodsVolume;               /**< [in] Количество товара, в тыс. долях (30.234->30234)*/
    char   GoodsCode[MAX_GOODS_CODE + 1]; /**< [in] Код товара во внешней системе.*/
    char   GoodsName[MAX_GOODS_NAME]; /**< [in] Наименование товара во внешней системе. Внимание! В структуре auth_answer14 название товара на один символ короче чем в gate.dll TGoodsData. Зафиксируем эту ошибку как стандарт*/
} auth_answer14;

extern "C" PILOT_NT_API void hello_test(char* name);
/// <summary>
/// Проверка готовности пинпада 
/// Функция проверяет наличие пинпада. При успешном выполнении возвращает 0 (пинпад подключен), при неудачном – код ошибки (пинпад не подключен или неисправен). 
/// </summary>
/// <returns>int Код ошибки. </returns>
extern "C" PILOT_NT_API int TestPinpad();